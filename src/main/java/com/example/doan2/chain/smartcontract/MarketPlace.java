package com.example.doan2.chain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class MarketPlace extends Contract {
    public static final String BINARY = "608060405260196006556103e86007553480156200001c57600080fd5b50604051620035f2380380620035f283398181016040528101906200004291906200022c565b60016000819055506200006a6200005e620000f460201b60201c565b620000fc60201b60201c565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000273565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f482620001c7565b9050919050565b6200020681620001e7565b81146200021257600080fd5b50565b6000815190506200022681620001fb565b92915050565b60008060408385031215620002465762000245620001c2565b5b6000620002568582860162000215565b9250506020620002698582860162000215565b9150509250929050565b61336f80620002836000396000f3fe6080604052600436106100dd5760003560e01c8063715018a61161007f578063c7be7a4911610059578063c7be7a491461026b578063c922b17c146102a8578063d34c127e146102d1578063f2fde38b1461030e576100dd565b8063715018a6146101fe5780638da5cb5b146102155780639fee5bc614610240576100dd565b8063443c2fd7116100bb578063443c2fd714610154578063490624931461017f5780634cb55876146101aa57806359f48271146101d5576100dd565b80631a4b1a84146100e2578063243adbdd1461010d57806326232a2e14610129575b600080fd5b3480156100ee57600080fd5b506100f7610337565b604051610104919061229d565b60405180910390f35b61012760048036038101906101229190612302565b61035d565b005b34801561013557600080fd5b5061013e610c7a565b60405161014b919061233e565b60405180910390f35b34801561016057600080fd5b50610169610c80565b6040516101769190612502565b60405180910390f35b34801561018b57600080fd5b50610194610ef2565b6040516101a19190612545565b60405180910390f35b3480156101b657600080fd5b506101bf610f18565b6040516101cc9190612502565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190612302565b6112c7565b005b34801561020a57600080fd5b506102136115d4565b005b34801561022157600080fd5b5061022a6115e8565b604051610237919061256f565b60405180910390f35b34801561024c57600080fd5b50610255611612565b604051610262919061233e565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d9190612302565b611618565b60405161029f9190612618565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061265f565b611811565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190612302565b611c8f565b6040516103059190612502565b60405180910390f35b34801561031a57600080fd5b50610335600480360381019061033091906126b2565b611faa565b005b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600081116103a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103989061273c565b60405180910390fd5b6103ab600261202d565b8111156103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e4906127a8565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303fb0114336040518263ffffffff1660e01b815260040161044a919061256f565b600060405180830381865afa158015610467573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104909190612932565b51116104d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c8906129ed565b60405180910390fd5b6000600860008481526020019081526020016000209050600115158160050160149054906101000a900460ff16151514610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053790612a59565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990612ac5565b60405180910390fd5b6000816002015490506000600754600654836105ee9190612b14565b6105f89190612b9d565b90506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610657919061256f565b602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190612be3565b9050828110156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490612c82565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161073c929190612ca2565b602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190612be3565b9050838110156107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b990612d3d565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161082193929190612d5d565b6020604051808303816000875af1158015610840573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108649190612dc0565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685876108d49190612ded565b6040518363ffffffff1660e01b81526004016108f1929190612e42565b6020604051808303816000875af1158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190612dc0565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61097b6115e8565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109d6919061256f565b602060405180830381865afa1580156109f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190612be3565b6040518363ffffffff1660e01b8152600401610a34929190612e6b565b6020604051808303816000875af1158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190612dc0565b50338560040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ac5600361203b565b8460050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303388600101546040518463ffffffff1660e01b8152600401610b2a93929190612d5d565b600060405180830381600087803b158015610b4457600080fd5b505af1158015610b58573d6000803e3d6000fd5b5050505060008560050160146101000a81548160ff021916908315150217905550338560040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffbd14ef83c9e36d4cd05cdc496d3b3a07da3041679b4142908d0ef3cef210dc485600001548660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600101548860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689604051610c6996959493929190612e94565b60405180910390a150505050505050565b60065481565b60606000610c8e600261202d565b90506000610c9c600361202d565b82610ca79190612ded565b905060008167ffffffffffffffff811115610cc557610cc46127e3565b5b604051908082528060200260200182016040528015610cfe57816020015b610ceb61219d565b815260200190600190039081610ce35790505b5090506000805b84811015610ee75760086000600183610d1e9190612ef5565b815260200190815260200160002060050160149054906101000a900460ff1615610ed45760086000600183610d539190612ef5565b81526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050838381518110610eba57610eb9612f4b565b5b60200260200101819052508180610ed090612f7a565b9250505b8080610edf90612f7a565b915050610d05565b508194505050505090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610f26600261202d565b90506000805b82811015611004573373ffffffffffffffffffffffffffffffffffffffff1660086000600184610f5c9190612ef5565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610fdd575060086000600183610fbd9190612ef5565b815260200190815260200160002060050160149054906101000a900460ff165b15610ff1578180610fed90612f7a565b9250505b8080610ffc90612f7a565b915050610f2c565b5060008167ffffffffffffffff811115611021576110206127e3565b5b60405190808252806020026020018201604052801561105a57816020015b61104761219d565b81526020019060019003908161103f5790505b5090506000805b848110156112bc573373ffffffffffffffffffffffffffffffffffffffff16600860006001846110919190612ef5565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156111125750600860006001836110f29190612ef5565b815260200190815260200160002060050160149054906101000a900460ff165b156112a957600860006001836111289190612ef5565b81526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff16151515158152505083838151811061128f5761128e612f4b565b5b602002602001018190525081806112a590612f7a565b9250505b80806112b490612f7a565b915050611061565b508194505050505090565b806000811161130b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113029061273c565b60405180910390fd5b611315600261202d565b811115611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134e906127a8565b60405180910390fd5b60006008600084815260200190815260200160002090508060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f79061300e565b60405180910390fd5b600115158160050160149054906101000a900460ff16151514611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144f90612a59565b60405180910390fd5b60008160050160146101000a81548160ff0219169083151502179055508060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303384600101546040518463ffffffff1660e01b81526004016114da93929190612d5d565b600060405180830381600087803b1580156114f457600080fd5b505af1158015611508573d6000803e3d6000fd5b50505050611516600361203b565b7f59c5c697698d4245f5931b2d83da5c09c16445194cb3e1adf9cef2cc3b9d722b81600001548260050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600101548460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600201546040516115c796959493929190612e94565b60405180910390a1505050565b6115dc612051565b6115e660006120cf565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b61162061219d565b8160008111611664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165b9061273c565b60405180910390fd5b61166e600261202d565b8111156116b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a7906127a8565b60405180910390fd5b600860008481526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050915050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166303fb0114336040518263ffffffff1660e01b815260040161186e919061256f565b600060405180830381865afa15801561188b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b49190612932565b51116118f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ec906130a0565b60405180910390fd5b60008111611938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192f9061310c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401611988919061233e565b602060405180830381865afa1580156119a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c99190613141565b73ffffffffffffffffffffffffffffffffffffffff1614611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a16906131ba565b60405180910390fd5b611a29600261203b565b6000611a35600261202d565b90506040518060e001604052808281526020018481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001600115158152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611c1693929190612d5d565b600060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b505050507f837b3a4a47f6aedac2e74f9f4be36ee333052be462fd01f2282e34cfd3a158a6818585333087604051611c81969594939291906131da565b60405180910390a150505050565b60606000611c9d600261202d565b90506000805b82811015611d30578460086000600184611cbd9190612ef5565b815260200190815260200160002060010154148015611d09575060086000600183611ce89190612ef5565b815260200190815260200160002060050160149054906101000a900460ff16155b15611d1d578180611d1990612f7a565b9250505b8080611d2890612f7a565b915050611ca3565b5060008167ffffffffffffffff811115611d4d57611d4c6127e3565b5b604051908082528060200260200182016040528015611d8657816020015b611d7361219d565b815260200190600190039081611d6b5790505b5090506000805b84811015611f9d578660086000600184611da79190612ef5565b815260200190815260200160002060010154148015611df3575060086000600183611dd29190612ef5565b815260200190815260200160002060050160149054906101000a900460ff16155b15611f8a5760086000600183611e099190612ef5565b81526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581525050838381518110611f7057611f6f612f4b565b5b60200260200101819052508180611f8690612f7a565b9250505b8080611f9590612f7a565b915050611d8d565b5081945050505050919050565b611fb2612051565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612021576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612018906132ad565b60405180910390fd5b61202a816120cf565b50565b600081600001549050919050565b6001816000016000828254019250508190555050565b612059612195565b73ffffffffffffffffffffffffffffffffffffffff166120776115e8565b73ffffffffffffffffffffffffffffffffffffffff16146120cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c490613319565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060e00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061226361225e6122598461221e565b61223e565b61221e565b9050919050565b600061227582612248565b9050919050565b60006122878261226a565b9050919050565b6122978161227c565b82525050565b60006020820190506122b2600083018461228e565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6122df816122cc565b81146122ea57600080fd5b50565b6000813590506122fc816122d6565b92915050565b600060208284031215612318576123176122c2565b5b6000612326848285016122ed565b91505092915050565b612338816122cc565b82525050565b6000602082019050612353600083018461232f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61238e816122cc565b82525050565b600061239f8261221e565b9050919050565b6123af81612394565b82525050565b60006123c08261221e565b9050919050565b6123d0816123b5565b82525050565b60008115159050919050565b6123eb816123d6565b82525050565b60e0820160008201516124076000850182612385565b50602082015161241a6020850182612385565b50604082015161242d6040850182612385565b50606082015161244060608501826123a6565b50608082015161245360808501826123a6565b5060a082015161246660a08501826123c7565b5060c082015161247960c08501826123e2565b50505050565b600061248b83836123f1565b60e08301905092915050565b6000602082019050919050565b60006124af82612359565b6124b98185612364565b93506124c483612375565b8060005b838110156124f55781516124dc888261247f565b97506124e783612497565b9250506001810190506124c8565b5085935050505092915050565b6000602082019050818103600083015261251c81846124a4565b905092915050565b600061252f8261226a565b9050919050565b61253f81612524565b82525050565b600060208201905061255a6000830184612536565b92915050565b612569816123b5565b82525050565b60006020820190506125846000830184612560565b92915050565b60e0820160008201516125a06000850182612385565b5060208201516125b36020850182612385565b5060408201516125c66040850182612385565b5060608201516125d960608501826123a6565b5060808201516125ec60808501826123a6565b5060a08201516125ff60a08501826123c7565b5060c082015161261260c08501826123e2565b50505050565b600060e08201905061262d600083018461258a565b92915050565b61263c816123b5565b811461264757600080fd5b50565b60008135905061265981612633565b92915050565b600080600060608486031215612678576126776122c2565b5b60006126868682870161264a565b9350506020612697868287016122ed565b92505060406126a8868287016122ed565b9150509250925092565b6000602082840312156126c8576126c76122c2565b5b60006126d68482850161264a565b91505092915050565b600082825260208201905092915050565b7f4d61726b65744974656d49642073686f756c64206265203e2030000000000000600082015250565b6000612726601a836126df565b9150612731826126f0565b602082019050919050565b6000602082019050818103600083015261275581612719565b9050919050565b7f4d61726b65744974656d49642073686f756c6420626520657869737400000000600082015250565b6000612792601c836126df565b915061279d8261275c565b602082019050919050565b600060208201905081810360008301526127c181612785565b9050919050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61281b826127d2565b810181811067ffffffffffffffff8211171561283a576128396127e3565b5b80604052505050565b600061284d6122b8565b90506128598282612812565b919050565b600067ffffffffffffffff821115612879576128786127e3565b5b612882826127d2565b9050602081019050919050565b60005b838110156128ad578082015181840152602081019050612892565b838111156128bc576000848401525b50505050565b60006128d56128d08461285e565b612843565b9050828152602081018484840111156128f1576128f06127cd565b5b6128fc84828561288f565b509392505050565b600082601f830112612919576129186127c8565b5b81516129298482602086016128c2565b91505092915050565b600060208284031215612948576129476122c2565b5b600082015167ffffffffffffffff811115612966576129656122c7565b5b61297284828501612904565b91505092915050565b7f57616c6c65742041646472657373206d757374206265206c696e6b656420776960008201527f74682075736572206163636f756e74206265666f7265206275794e6674000000602082015250565b60006129d7603d836126df565b91506129e28261297b565b604082019050919050565b60006020820190508181036000830152612a06816129ca565b9050919050565b7f4e4654206973206e6f742053656c6c696e670000000000000000000000000000600082015250565b6000612a436012836126df565b9150612a4e82612a0d565b602082019050919050565b60006020820190508181036000830152612a7281612a36565b9050919050565b7f596f752063616e206e6f742062757920796f7572206f776e204e465400000000600082015250565b6000612aaf601c836126df565b9150612aba82612a79565b602082019050919050565b60006020820190508181036000830152612ade81612aa2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b1f826122cc565b9150612b2a836122cc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b6357612b62612ae5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ba8826122cc565b9150612bb3836122cc565b925082612bc357612bc2612b6e565b5b828204905092915050565b600081519050612bdd816122d6565b92915050565b600060208284031215612bf957612bf86122c2565b5b6000612c0784828501612bce565b91505092915050565b7f596f7520646f206e6f74206861766520656e6f75676820444b4320746f20627560008201527f792074686973204e465400000000000000000000000000000000000000000000602082015250565b6000612c6c602a836126df565b9150612c7782612c10565b604082019050919050565b60006020820190508181036000830152612c9b81612c5f565b9050919050565b6000604082019050612cb76000830185612560565b612cc46020830184612560565b9392505050565b7f596f7520646f206e6f7420617070726f766520656e6f75676820444b4320746f60008201527f206275792074686973204e465400000000000000000000000000000000000000602082015250565b6000612d27602d836126df565b9150612d3282612ccb565b604082019050919050565b60006020820190508181036000830152612d5681612d1a565b9050919050565b6000606082019050612d726000830186612560565b612d7f6020830185612560565b612d8c604083018461232f565b949350505050565b612d9d816123d6565b8114612da857600080fd5b50565b600081519050612dba81612d94565b92915050565b600060208284031215612dd657612dd56122c2565b5b6000612de484828501612dab565b91505092915050565b6000612df8826122cc565b9150612e03836122cc565b925082821015612e1657612e15612ae5565b5b828203905092915050565b6000612e2c8261226a565b9050919050565b612e3c81612e21565b82525050565b6000604082019050612e576000830185612e33565b612e64602083018461232f565b9392505050565b6000604082019050612e806000830185612560565b612e8d602083018461232f565b9392505050565b600060c082019050612ea9600083018961232f565b612eb66020830188612560565b612ec3604083018761232f565b612ed06060830186612e33565b612edd6080830185612e33565b612eea60a083018461232f565b979650505050505050565b6000612f00826122cc565b9150612f0b836122cc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f4057612f3f612ae5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612f85826122cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fb757612fb6612ae5565b5b600182019050919050565b7f596f7520617265206e6f74204e46542773204f776e6572000000000000000000600082015250565b6000612ff86017836126df565b915061300382612fc2565b602082019050919050565b6000602082019050818103600083015261302781612feb565b9050919050565b7f57616c6c65742041646472657373206d757374206265206c696e6b656420776960008201527f74682075736572206163636f756e74206265666f7265206c6973744e66740000602082015250565b600061308a603e836126df565b91506130958261302e565b604082019050919050565b600060208201905081810360008301526130b98161307d565b9050919050565b7f5072696365206d757374203e2030000000000000000000000000000000000000600082015250565b60006130f6600e836126df565b9150613101826130c0565b602082019050919050565b60006020820190508181036000830152613125816130e9565b9050919050565b60008151905061313b81612633565b92915050565b600060208284031215613157576131566122c2565b5b60006131658482850161312c565b91505092915050565b7f596f7520617265206e6f74204e46542773206f776e6572000000000000000000600082015250565b60006131a46017836126df565b91506131af8261316e565b602082019050919050565b600060208201905081810360008301526131d381613197565b9050919050565b600060c0820190506131ef600083018961232f565b6131fc6020830188612560565b613209604083018761232f565b6132166060830186612560565b6132236080830185612560565b61323060a083018461232f565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132976026836126df565b91506132a28261323b565b604082019050919050565b600060208201905081810360008301526132c68161328a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133036020836126df565b915061330e826132cd565b602082019050919050565b60006020820190508181036000830152613332816132f6565b905091905056fea2646970667358221220b4677b451e95c44f7f4df67fbec2c6aa154a15dad23c398ea2e2da196a12456d64736f6c634300080d0033\n";

    public static final String FUNC_BUYNFT = "buyNft";

    public static final String FUNC_CANCELSELLNFT = "cancelSellNft";

    public static final String FUNC_DENO = "deno";

    public static final String FUNC_GETLISTINGNFTS = "getListingNfts";

    public static final String FUNC_GETMARKETITEM = "getMarketItem";

    public static final String FUNC_GETMYLISTINGNFTS = "getMyListingNfts";

    public static final String FUNC_GETNFTSELLHISTORY = "getNftSellHistory";

    public static final String FUNC_LINKWALLET = "linkWallet";

    public static final String FUNC_LISTNFT = "listNft";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLATFORMFEE = "platformFee";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TOADKINGCOIN = "toadKingCoin";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event NFTLISTED_EVENT = new Event("NFTListed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NFTSALECANCELED_EVENT = new Event("NFTSaleCanceled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NFTSOLD_EVENT = new Event("NFTSold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MarketPlace(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MarketPlace(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MarketPlace(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MarketPlace(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<NFTListedEventResponse> getNFTListedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NFTLISTED_EVENT, transactionReceipt);
        ArrayList<NFTListedEventResponse> responses = new ArrayList<NFTListedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NFTListedEventResponse typedResponse = new NFTListedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NFTListedEventResponse> nFTListedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NFTListedEventResponse>() {
            @Override
            public NFTListedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NFTLISTED_EVENT, log);
                NFTListedEventResponse typedResponse = new NFTListedEventResponse();
                typedResponse.log = log;
                typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NFTListedEventResponse> nFTListedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTLISTED_EVENT));
        return nFTListedEventFlowable(filter);
    }

    public static List<NFTSaleCanceledEventResponse> getNFTSaleCanceledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NFTSALECANCELED_EVENT, transactionReceipt);
        ArrayList<NFTSaleCanceledEventResponse> responses = new ArrayList<NFTSaleCanceledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NFTSaleCanceledEventResponse typedResponse = new NFTSaleCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NFTSaleCanceledEventResponse> nFTSaleCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NFTSaleCanceledEventResponse>() {
            @Override
            public NFTSaleCanceledEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NFTSALECANCELED_EVENT, log);
                NFTSaleCanceledEventResponse typedResponse = new NFTSaleCanceledEventResponse();
                typedResponse.log = log;
                typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NFTSaleCanceledEventResponse> nFTSaleCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTSALECANCELED_EVENT));
        return nFTSaleCanceledEventFlowable(filter);
    }

    public static List<NFTSoldEventResponse> getNFTSoldEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NFTSOLD_EVENT, transactionReceipt);
        ArrayList<NFTSoldEventResponse> responses = new ArrayList<NFTSoldEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NFTSoldEventResponse typedResponse = new NFTSoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NFTSoldEventResponse> nFTSoldEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NFTSoldEventResponse>() {
            @Override
            public NFTSoldEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NFTSOLD_EVENT, log);
                NFTSoldEventResponse typedResponse = new NFTSoldEventResponse();
                typedResponse.log = log;
                typedResponse.marketItemId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nftContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.seller = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NFTSoldEventResponse> nFTSoldEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTSOLD_EVENT));
        return nFTSoldEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> buyNft(BigInteger _marketItemId, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(_marketItemId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelSellNft(BigInteger _marketItemId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCELSELLNFT, 
                Arrays.<Type>asList(new Uint256(_marketItemId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> deno() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DENO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getListingNfts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTINGNFTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NFTMarketItem>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<NFTMarketItem> getMarketItem(BigInteger _marketItemId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMARKETITEM, 
                Arrays.<Type>asList(new Uint256(_marketItemId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<NFTMarketItem>() {}));
        return executeRemoteCallSingleValueReturn(function, NFTMarketItem.class);
    }

    public RemoteFunctionCall<List> getMyListingNfts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMYLISTINGNFTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NFTMarketItem>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getNftSellHistory(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNFTSELLHISTORY, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NFTMarketItem>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> linkWallet() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINKWALLET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> listNft(String _nftContract, BigInteger _tokenId, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LISTNFT, 
                Arrays.<Type>asList(new Address(160, _nftContract),
                new Uint256(_tokenId),
                new Uint256(_price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> platformFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLATFORMFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> toadKingCoin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOADKINGCOIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MarketPlace load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketPlace(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MarketPlace load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketPlace(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MarketPlace load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MarketPlace(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MarketPlace load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MarketPlace(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MarketPlace> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _toadKingTokenContract, String _linkWalletAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _toadKingTokenContract),
                new Address(160, _linkWalletAddress)));
        return deployRemoteCall(MarketPlace.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MarketPlace> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _toadKingTokenContract, String _linkWalletAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _toadKingTokenContract),
                new Address(160, _linkWalletAddress)));
        return deployRemoteCall(MarketPlace.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MarketPlace> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _toadKingTokenContract, String _linkWalletAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _toadKingTokenContract),
                new Address(160, _linkWalletAddress)));
        return deployRemoteCall(MarketPlace.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MarketPlace> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _toadKingTokenContract, String _linkWalletAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _toadKingTokenContract),
                new Address(160, _linkWalletAddress)));
        return deployRemoteCall(MarketPlace.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class NFTMarketItem extends StaticStruct {
        public BigInteger marketItemId;

        public BigInteger tokenId;

        public BigInteger price;

        public String seller;

        public String buyer;

        public String nftContract;

        public Boolean isSelling;

        public NFTMarketItem(BigInteger marketItemId, BigInteger tokenId, BigInteger price, String seller, String buyer, String nftContract, Boolean isSelling) {
            super(new Uint256(marketItemId),
                    new Uint256(tokenId),
                    new Uint256(price),
                    new Address(160, seller),
                    new Address(160, buyer),
                    new Address(160, nftContract),
                    new Bool(isSelling));
            this.marketItemId = marketItemId;
            this.tokenId = tokenId;
            this.price = price;
            this.seller = seller;
            this.buyer = buyer;
            this.nftContract = nftContract;
            this.isSelling = isSelling;
        }

        public NFTMarketItem(Uint256 marketItemId, Uint256 tokenId, Uint256 price, Address seller, Address buyer, Address nftContract, Bool isSelling) {
            super(marketItemId, tokenId, price, seller, buyer, nftContract, isSelling);
            this.marketItemId = marketItemId.getValue();
            this.tokenId = tokenId.getValue();
            this.price = price.getValue();
            this.seller = seller.getValue();
            this.buyer = buyer.getValue();
            this.nftContract = nftContract.getValue();
            this.isSelling = isSelling.getValue();
        }
    }

    public static class NFTListedEventResponse extends BaseEventResponse {
        public BigInteger marketItemId;

        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public String buyer;

        public BigInteger price;
    }

    public static class NFTSaleCanceledEventResponse extends BaseEventResponse {
        public BigInteger marketItemId;

        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public String buyer;

        public BigInteger price;
    }

    public static class NFTSoldEventResponse extends BaseEventResponse {
        public BigInteger marketItemId;

        public String nftContract;

        public BigInteger tokenId;

        public String seller;

        public String buyer;

        public BigInteger price;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
